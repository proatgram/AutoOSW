diff --git a/.vscode/launch.json b/.vscode/launch.json
deleted file mode 100644
index e96072d..0000000
--- a/.vscode/launch.json
+++ /dev/null
@@ -1,34 +0,0 @@
-{
-    // Use IntelliSense to learn about possible attributes.
-    // Hover to view descriptions of existing attributes.
-    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
-    "version": "0.2.0",
-    "configurations": [
-        {
-            "name": "(gdb) Launch",
-            "type": "cppdbg",
-            "request": "launch",
-            "program": "${workspaceFolder}/build/steamworks_dumper",
-            "args": ["/home/onni/Documents/opensteamclient/OpenSteamClient/tools/oswupdater/work/1719259903/extracted/bins_ubuntu12/ubuntu12_32/steamclient.so", "outputnew"],
-            "stopAtEntry": false,
-            "cwd": "${workspaceFolder}/build",
-            "environment": [],
-            "externalConsole": false,
-            "preLaunchTask": "CMake: build",
-            "MIMode": "gdb",
-            "setupCommands": [
-                {
-                    "description": "Enable pretty-printing for gdb",
-                    "text": "-enable-pretty-printing",
-                    "ignoreFailures": true
-                },
-                {
-                    "description": "Set Disassembly Flavor to Intel",
-                    "text": "-gdb-set disassembly-flavor intel",
-                    "ignoreFailures": true
-                }
-            ]
-        }
-
-    ]
-}
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
deleted file mode 100644
index b98d531..0000000
--- a/.vscode/settings.json
+++ /dev/null
@@ -1,81 +0,0 @@
-{
-    "files.associations": {
-        "iostream": "cpp",
-        "cctype": "cpp",
-        "clocale": "cpp",
-        "cmath": "cpp",
-        "cstdarg": "cpp",
-        "cstddef": "cpp",
-        "cstdio": "cpp",
-        "cstdlib": "cpp",
-        "cstring": "cpp",
-        "ctime": "cpp",
-        "cwchar": "cpp",
-        "cwctype": "cpp",
-        "array": "cpp",
-        "atomic": "cpp",
-        "bit": "cpp",
-        "*.tcc": "cpp",
-        "bitset": "cpp",
-        "chrono": "cpp",
-        "compare": "cpp",
-        "concepts": "cpp",
-        "condition_variable": "cpp",
-        "cstdint": "cpp",
-        "deque": "cpp",
-        "list": "cpp",
-        "map": "cpp",
-        "set": "cpp",
-        "string": "cpp",
-        "unordered_map": "cpp",
-        "vector": "cpp",
-        "exception": "cpp",
-        "algorithm": "cpp",
-        "functional": "cpp",
-        "iterator": "cpp",
-        "memory": "cpp",
-        "memory_resource": "cpp",
-        "numeric": "cpp",
-        "optional": "cpp",
-        "random": "cpp",
-        "ratio": "cpp",
-        "string_view": "cpp",
-        "system_error": "cpp",
-        "tuple": "cpp",
-        "type_traits": "cpp",
-        "utility": "cpp",
-        "format": "cpp",
-        "fstream": "cpp",
-        "initializer_list": "cpp",
-        "iomanip": "cpp",
-        "iosfwd": "cpp",
-        "istream": "cpp",
-        "limits": "cpp",
-        "mutex": "cpp",
-        "new": "cpp",
-        "numbers": "cpp",
-        "ostream": "cpp",
-        "sstream": "cpp",
-        "stdexcept": "cpp",
-        "streambuf": "cpp",
-        "thread": "cpp",
-        "cinttypes": "cpp",
-        "typeinfo": "cpp",
-        "variant": "cpp",
-        "__bit_reference": "cpp",
-        "__config": "cpp",
-        "__debug": "cpp",
-        "__errc": "cpp",
-        "__hash_table": "cpp",
-        "__locale": "cpp",
-        "__mutex_base": "cpp",
-        "__node_handle": "cpp",
-        "__split_buffer": "cpp",
-        "__threading_support": "cpp",
-        "__tree": "cpp",
-        "__verbose_abort": "cpp",
-        "ios": "cpp",
-        "locale": "cpp",
-        "coroutine": "cpp"
-    }
-}
\ No newline at end of file
diff --git a/.vscode/tasks.json b/.vscode/tasks.json
deleted file mode 100644
index 6dcdd7a..0000000
--- a/.vscode/tasks.json
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-    "version": "2.0.0",
-    "tasks": [
-        {
-            "type": "cmake",
-            "label": "CMake: build",
-            "command": "build",
-            "targets": [
-                "all"
-            ],
-            "group": {
-                "kind": "build",
-                "isDefault": true
-            },
-            "problemMatcher": [],
-            "detail": "CMake template build task"
-        }
-    ]
-
-}
\ No newline at end of file
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8aa77be..b8dc4ce 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,26 +9,27 @@ set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 set(CMAKE_BUILD_TYPE Debug)
 
-add_subdirectory(external)
-
-add_executable(steamworks_dumper
-    src/main.cpp
-    src/moduleimage.h
-    src/moduleimage.cpp
-    src/clientmodule.h
-    src/clientmodule.cpp
-    src/dumperbase.h
-    src/dumperbase.cpp
-    src/randomstack.cpp
-    src/randomstack.h
-    src/enumdumper.h
-    src/enumdumper.cpp
-    src/clientinterfacedumper.h
-    src/clientinterfacedumper.cpp
-    src/callbackdumper.h
-    src/callbackdumper.cpp
-    src/emsgdumper.h
-    src/emsgdumper.cpp
+add_library(steamworks_dumper
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/steamworks_dumper.cpp>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/steamworks_dumper.h>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/moduleimage.cpp>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/moduleimage.h>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/clientmodule.cpp>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/clientmodule.h>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/dumperbase.cpp>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/dumperbase.h>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/randomstack.cpp>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/randomstack.h>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/enumdumper.cpp>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/enumdumper.h>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/clientinterfacedumper.cpp>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/clientinterfacedumper.h>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/callbackdumper.cpp>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/callbackdumper.h>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/emsgdumper.cpp>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/emsgdumper.h>
 )
 
-target_link_libraries(steamworks_dumper ${CAPSTONE_LIBRARIES} argparse)
+target_link_libraries(steamworks_dumper PUBLIC ${CAPSTONE_LIBRARIES})
+
+target_include_directories(steamworks_dumper PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)
diff --git a/external/CMakeLists.txt b/external/CMakeLists.txt
deleted file mode 100644
index 1479b2a..0000000
--- a/external/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-include(FetchContent)
-
-FetchContent_Declare(
-    argparse
-    GIT_REPOSITORY https://github.com/p-ranav/argparse.git
-    GIT_TAG 997da9255618311d1fcb0135ce86022729d1f1cb
-)
-FetchContent_MakeAvailable(argparse)
diff --git a/src/callbackdumper.h b/include/callbackdumper.h
similarity index 100%
rename from src/callbackdumper.h
rename to include/callbackdumper.h
diff --git a/src/clientinterfacedumper.h b/include/clientinterfacedumper.h
similarity index 100%
rename from src/clientinterfacedumper.h
rename to include/clientinterfacedumper.h
diff --git a/src/clientmodule.h b/include/clientmodule.h
similarity index 100%
rename from src/clientmodule.h
rename to include/clientmodule.h
diff --git a/src/dumperbase.h b/include/dumperbase.h
similarity index 100%
rename from src/dumperbase.h
rename to include/dumperbase.h
diff --git a/src/emsgdumper.h b/include/emsgdumper.h
similarity index 100%
rename from src/emsgdumper.h
rename to include/emsgdumper.h
diff --git a/src/enumdumper.h b/include/enumdumper.h
similarity index 100%
rename from src/enumdumper.h
rename to include/enumdumper.h
diff --git a/src/moduleimage.h b/include/moduleimage.h
similarity index 100%
rename from src/moduleimage.h
rename to include/moduleimage.h
diff --git a/src/randomstack.h b/include/randomstack.h
similarity index 100%
rename from src/randomstack.h
rename to include/randomstack.h
diff --git a/include/steamworks_dumper.h b/include/steamworks_dumper.h
new file mode 100644
index 0000000..6ce4459
--- /dev/null
+++ b/include/steamworks_dumper.h
@@ -0,0 +1,8 @@
+#include "clientmodule.h"
+
+void DumpEnums(ClientModule* t_module, const std::string& t_outPath);
+void DumpInterfaces(ClientModule* t_module, const std::string& t_outPath, bool t_includeOffsets);
+void DumpCallbacks(ClientModule* t_module, const std::string& t_outPath, bool t_includeOffsets);
+void DumpLegacyEMsgList(ClientModule* t_module, const std::string& t_outPath);
+
+int Dump(const std::string &modulePath, const std::string &outputPath, bool includeOffsets);
diff --git a/src/main.cpp b/src/steamworks_dumper.cpp
similarity index 89%
rename from src/main.cpp
rename to src/steamworks_dumper.cpp
index 4fb6a1d..1ab1d00 100644
--- a/src/main.cpp
+++ b/src/steamworks_dumper.cpp
@@ -1,11 +1,11 @@
+#include "steamworks_dumper.h"
+
 #include <iostream>
 #include <fstream>
-#include "clientmodule.h"
 #include "enumdumper.h"
 #include "clientinterfacedumper.h"
 #include "callbackdumper.h"
 #include "emsgdumper.h"
-#include <argparse/argparse.hpp>
 
 void DumpEnums(ClientModule* t_module, const std::string& t_outPath)
 {
@@ -214,37 +214,8 @@ void DumpLegacyEMsgList(ClientModule* t_module, const std::string& t_outPath)
     }
 }
 
-int main(int argc, char* argv[])
+int Dump(const std::string &modulePath, const std::string &outputPath, bool includeOffsets)
 {
-    argparse::ArgumentParser program("steamworks_dumper");
-    program.add_argument("--dump-offsets")
-            .default_value(false)
-            .implicit_value(true)
-            .help("include relative offsets/addresses in dumps");
-
-    program.add_argument("in")
-            .help(".so in")
-            .required();
-
-    program.add_argument("out")
-            .help("output path")
-            .required();
-
-    try
-    {
-        program.parse_args(argc, argv);
-    }
-    catch (const std::runtime_error& err)
-    {
-        std::cerr << err.what() << std::endl;
-        std::cerr << program;
-        std::exit(1);
-    }
-
-    std::string modulePath = program.get("in");
-    std::string outPath = program.get("out");
-    bool includeOffsets = program.get<bool>("--dump-offsets");
-
     std::cout << "Loading module image... ";
     ClientModule module(modulePath);
     if(!module.Load())
@@ -262,10 +233,10 @@ int main(int argc, char* argv[])
     }
     std::cout << "Done" << std::endl;
 
-    DumpCallbacks(&module, outPath, includeOffsets);
-    DumpInterfaces(&module, outPath, includeOffsets);
-    DumpEnums(&module, outPath);
-    DumpLegacyEMsgList(&module, outPath);
+    DumpCallbacks(&module, outputPath, includeOffsets);
+    DumpInterfaces(&module, outputPath, includeOffsets);
+    DumpEnums(&module, outputPath);
+    DumpLegacyEMsgList(&module, outputPath);
 
     return 0;
 }
